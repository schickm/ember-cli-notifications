{{notification-container position=position}}
<div class="bg-blue white py4">
  <div class="max-width-4 mx-auto px2">
    <div class="mb3">
      <h1 class="m0">ember-cli-notifications</h1>
      <p class="h3 muted">Atom inspired notifications for ember-cli</p>
    </div>
    <div class="flex mxn1">
      <div class="px1">
        <a class="btn btn-outline" href="https://github.com/stonecircle/ember-cli-notifications" target="_blank">GitHub</a>
      </div>
      <div class="px1">
        <a class="btn btn-outline" href="https://www.npmjs.com/package/ember-cli-notifications" target="_blank">npm</a>
      </div>
    </div>
  </div>
</div>
<div class="max-width-4 mx-auto px2">
  <div class="py2">
    <h2>Installation</h2>
    <hr>
    {{#themed-syntax lang="bash" theme="dark" class="h5" withBuffers=false}}
ember install ember-cli-notifications
    {{/themed-syntax}}
  </div>
  <div class="py2">
    <h2>Basic usage</h2>
    <hr>
    <p>Include the container component in your template.</p>
    <p>Optionally, change the position of the notifications container.</p>
    <p class="h5"><i>Default value is top</i></p>
    {{#themed-syntax lang="htmlbars" theme="dark" class="h5" withBuffers=false}}
&#123;&#123;notification-container position="top-right"&#125;&#125;
    {{/themed-syntax}}

    <p>Inject the notifications service where required.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
notifications: Ember.inject.service('notification-messages')
    {{/themed-syntax}}

    <p>Or inject it everywhere with an initializer (app/initializers/inject-notifications.js):</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
export function initialize(application) {
  application.inject('controller', 'notifications', 'service:notification-messages');
}

export default {
  name: 'inject-notifications',
  initialize
};
    {{/themed-syntax}}

    <p>There are four styles of notification available.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
// Info
this.get('notifications').info('You have one unread message');

// Error
this.get('notifications').error('Something went wrong');

// Success
this.get('notifications').success('Saved successfully!');

// Warning
this.get('notifications').warning('You have unsaved changes');
    {{/themed-syntax}}

    <h3>component</h3>
    <p>A custom component may be used for rendering the message</p>

    {{#themed-syntax lang="htmlbars" theme="dark" class="h5" withBuffers=false}}
&lt;h1&gt;&#123;&#123;message.title&#125;&#125;&lt;/h1&gt;
&lt;span class='count'&gt;&#123;&#123;message.count&#125;&#125;&lt;/span&gt;
    {{/themed-syntax}}

    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
let message = {
  title: 'You have unread messages',
  count: 3,
};

this.get('notifications').info(message, {
  component: 'unread-message'
});
    {{/themed-syntax}}

    <h3>htmlContent</h3>
    <p>You can enable basic HTML markup for notification messages.</p>
    <p><b>Warning:</b> This introduces a potential security risk since the notification message will no longer be escaped by Ember.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
this.get('notifications').info('You have &lt;b&gt;one&lt;/b&gt; unread message', {
  htmlContent: true
});
    {{/themed-syntax}}

    <div class="bg-darken-1 rounded p2 mb3">
      <div class="mxn2 mb3">
        <div class="px2">
          <h4>Message</h4>
          {{input class="input" type="text" value=computedMessage}}
          <div class="mt1">
            {{input type="checkbox" checked=htmlContent}}
            <label class="h5">Enable HMTL content</label>
          </div>
        </div>
        <div class="px2">
          <h4>Type</h4>
          <div class="sm-flex mxn1">
            <div class="px1 mb1">
              {{radio-button value="success" groupValue=type}}
              <label>Success</label>
            </div>
            <div class="px1 mb1">
              {{radio-button value="info" groupValue=type}}
              <label>Info</label>
            </div>
            <div class="px1 mb1">
              {{radio-button value="error" groupValue=type}}
              <label>Error</label>
            </div>
            <div class="px1 mb1">
              {{radio-button value="warning" groupValue=type}}
              <label>Warning</label>
            </div>
          </div>
        </div>
        <div class="px2">
          <h4>Position</h4>
          <div class="sm-flex mxn1">
            <div class="px1 mb1">
              {{radio-button value="top" groupValue=position}}
              <label>top</label>
            </div>
            <div class="px1 mb1">
              {{radio-button value="top-left" groupValue=position}}
              <label>top-left</label>
            </div>
            <div class="px1 mb1">
              {{radio-button value="top-right" groupValue=position}}
              <label>top-right</label>
            </div>
            <div class="px1 mb1">
              {{radio-button value="bottom" groupValue=position}}
              <label>bottom</label>
            </div>
            <div class="px1 mb1">
              {{radio-button value="bottom-left" groupValue=position}}
              <label>bottom-left</label>
            </div>
            <div class="px1 mb1">
              {{radio-button value="bottom-right" groupValue=position}}
              <label>bottom-right</label>
            </div>
          </div>
        </div>
      </div>
      <button class="btn btn-primary" {{action "showNotifcation"}}>Show</button>
    </div>
  </div>
  <div class="py2">
    <h2>Clearing notifications</h2>
    <hr>
    <h3>autoClear</h3>
    <p>Set a notification to automatically clear. This will take precedence over the global default value.</p>
    <p>If true, inherits the default <b>clearDuration</b> value unless specified.</p>
    <p class="h5"><i>Default value is false</i></p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
this.get('notifications').success('Saved successfully!', {
  autoClear: true
});
    {{/themed-syntax}}
    <p>Set a global default value.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
this.get('notifications').setDefaultAutoClear(true);
    {{/themed-syntax}}

    <h3>clearDuration</h3>
    <p>Specify a duration (ms) before the notification clears. This will take precedence over the global default value.</p>
    <p class="h5"><i>Default value is 3200</i></p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
this.get('notifications').success('Saved successfully!', {
  autoClear: true,
  clearDuration: 1200
});
    {{/themed-syntax}}
    <p>Set a global default value.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
this.get('notifications').setDefaultClearDuration(1200);
    {{/themed-syntax}}

    <h3>clearAll</h3>
    <p>You can remove all present notifications before adding a new one.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
this.get('notifications').clearAll();
this.get('notifications').success('Saved successfully!', {
  autoClear: true
});
    {{/themed-syntax}}

    <div class="bg-darken-1 rounded p2 mb3">
      <div class="mxn2 mb3">
        <div class="px2">
          <h4>Clear automatically</h4>
          {{input type="checkbox" checked=autoClear}}
          <label>Enable</label>
          <div class="mt1">
            <label class="label">Timeout (ms)</label>
            {{input class="input" type="number" value=clearDuration disabled=disableTimeoutInput}}
          </div>
        </div>
        <div class="px2">
          <h4>Clear all</h4>
          {{input type="checkbox" checked=clearAll}}
          <label>Enable</label>
        </div>
      </div>
      <button class="btn btn-primary" {{action "showNotifcation"}}>Show</button>
    </div>
  </div>
  <div class="py2">
    <h2>Notification with custom CSS</h2>
    <hr>
    <p>Pass a string of CSS classes to the notification component.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
this.get('notifications').success('Saved successfully!', {
  autoClear: true,
  cssClasses: 'profile-saved-success-notification'
});
    {{/themed-syntax}}
  </div>
  <div class="py2">
    <h2>Notification with callback</h2>
    <hr>
    <p>Add the ability to click the notification for a callback.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
this.get('notifications').error('Something went wrong. Click to try again', {
  onClick: (notification) => {
    this.get('model').save();
  }
});
    {{/themed-syntax}}
  </div>
  <div class="py2">
    <h2>Notification with callback when X is clicked</h2>
    <hr>
    <p>Add the ability to trigger a callback when the X is clicked.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
this.get('notifications').error('Something went wrong. Click to try again', {
  onRemoveClick: (notification) => {
    this.get('model').destroy();
  }
});
    {{/themed-syntax}}
  </div>
  <div class="py2">
    <h2>Config</h2>
    <hr>
    <h3>Icons</h3>
    <p><a href="http://fontawesome.io/" target="_blank">Font Awesome</a> is a requirement to display the icons on the notifications.</p>

    <p>If Font Awesome is not already included in the consuming application, add the following to your environment config file.</p>

    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
var ENV = {
  'ember-cli-notifications': {
    includeFontAwesome: true
  }
}
    {{/themed-syntax}}

    <p>Alternatively, the notifications can use the <a href="http://getbootstrap.com/components/#glyphicons" target="_blank">Glyphicons</a> icon package. Glyphicons will <b>not</b> added to your application via this addon.</p>

    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
var ENV = {
  'ember-cli-notifications': {
    icons: 'bootstrap'
  }
}
    {{/themed-syntax}}
  </div>
  <div class="py2">
    <h2>Extend</h2>
    <hr>
    <p>The <b>notification-messages-service</b> service can be imported into the consuming app and extended.</p>
    {{#themed-syntax lang="js" theme="dark" class="h5" withBuffers=false}}
// app/services/notifications.js
import NotificationsService from 'ember-cli-notifications/services/notification-messages-service';

export default NotificationsService.extend({
  // Extend the imported service
});
    {{/themed-syntax}}
    <p>Be sure to inject the <i>new</i> service into your app.</p>
  </div>
</div>
<footer class="bg-darken-1 py3">
  <div class="max-width-4 mx-auto px2">
    <div class="sm-flex items-center">
      <div class="flex-auto">
        <ul class="list-reset mxn1">
          <li class="inline-block px1"><a class="bold" href="https://github.com/stonecircle/ember-cli-notifications" target="_blank">GitHub</a></li>
          <li class="inline-block px1"><a class="bold" href="https://www.npmjs.com/package/ember-cli-notifications" target="_blank">npm</a></li>
        </ul>
      </div>
      <p class="h5">&copy; Stone Circle 2016</p>
    </div>
  </div>
</footer>
